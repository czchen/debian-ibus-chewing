Description: Fix CVE-2013-4509
 Skip key event when input purpose is password.
 .
 ibus-chewing (1.4.3-4) unstable; urgency=high
 .
   * Team upload.
   * CVE-2013-4509 (Closes: #730781)
Author: ChangZhuo Chen (陳昌倬) <czchen@gmail.com>
Bug-Debian: http://bugs.debian.org/730781
---
--- ibus-chewing-1.4.3.orig/src/IBusChewingEngine-input-events.c
+++ ibus-chewing-1.4.3/src/IBusChewingEngine-input-events.c
@@ -29,6 +29,7 @@ gboolean ibus_chewing_engine_process_key
     gboolean result=TRUE;
 
     IBusChewingEngine *self=IBUS_CHEWING_ENGINE(engine);
+    if (ibus_chewing_engine_is_password(self)) return FALSE;
     guint kSym=ibus_chewing_engine_keycode_to_keysym(self,keysym, keycode, modifiers);
 
     if (modifiers & IBUS_RELEASE_MASK){
@@ -282,6 +283,7 @@ void ibus_chewing_engine_handle_Default(
 void ibus_chewing_engine_candidate_clicked(IBusEngine *engine, guint index, guint button, guint state){
     G_DEBUG_MSG(2,"***[I2] candidate_clicked(-, %u, %u, %u) ... proceed.", index, button, state);
     IBusChewingEngine *self=IBUS_CHEWING_ENGINE(engine);
+    if (ibus_chewing_engine_is_password(self)) return;
     if (index >= chewing_get_candPerPage(self->context) || index <0) {
 	G_DEBUG_MSG(3,"[I3]  candidate_clicked() index out of ranged");
 	return;
--- ibus-chewing-1.4.3.orig/src/IBusChewingEngine.gob
+++ ibus-chewing-1.4.3/src/IBusChewingEngine.gob
@@ -110,6 +110,7 @@ enum CHEWING_FLAG{
  * @SHOW_CANDIDATE:     Whether the candidate selection should be shown. Important for Plain Zhuyin.
  * @NEED_COMMIT:        There's Something to commit.
  * @FORCE_COMMIT:       The engine should commit
+ * @IS_PASSWORD:        Current input is password.
  *
  * Engine status show the current states of engine,
  * Thus this will change quite often.
@@ -124,6 +125,7 @@ enum ENGINE_STATUS{
     SHOW_CANDIDATE=		0x8,
     NEED_COMMIT=		0x10,
     FORCE_COMMIT=		0x20,
+    IS_PASSWORD=		0x40,
 } Engine:Status;
 
 %h{
@@ -633,6 +635,11 @@ class IBus:Chewing:Engine from IBus:Engi
 	}
     }
 
+    protected gboolean is_password(self){
+	G_DEBUG_MSG(5, "[I5] is_password = %d", self->chewingFlags & ENGINE_STATUS_IS_PASSWORD);
+	return !!(self->_priv->statusFlags & ENGINE_STATUS_IS_PASSWORD);
+    }
+
     /**
      * refresh_property_list:
      * @self: this instances.
@@ -952,6 +959,7 @@ class IBus:Chewing:Engine from IBus:Engi
     override (IBus:Engine) void
     page_up(IBus:Engine *engine){
 	Self *self=SELF(engine);
+	if (self_is_password(self)) return;
 	chewing_handle_PageUp(self->context);
 	self_update(self);
     }
@@ -960,6 +968,7 @@ class IBus:Chewing:Engine from IBus:Engi
     override (IBus:Engine) void
     page_down(IBus:Engine *engine){
 	Self *self=SELF(engine);
+	if (self_is_password(self)) return;
 	chewing_handle_PageDown(self->context);
 	self_update(self);
     }
@@ -967,6 +976,7 @@ class IBus:Chewing:Engine from IBus:Engi
     override (IBus:Engine) void
     cursor_up(IBus:Engine *engine){
 	Self *self=SELF(engine);
+	if (self_is_password(self)) return;
 	chewing_handle_Up(self->context);
 	self_update(self);
     }
@@ -974,6 +984,7 @@ class IBus:Chewing:Engine from IBus:Engi
     override (IBus:Engine) void
     cursor_down(IBus:Engine *engine){
 	Self *self=SELF(engine);
+	if (self_is_password(self)) return;
 	chewing_handle_Down(self->context);
 	self_update(self);
     }
@@ -1118,6 +1129,19 @@ class IBus:Chewing:Engine from IBus:Engi
 	ibus_property_set_visible(prop,FALSE);
 	ibus_engine_update_property(engine,prop);
     }
+
+    override (IBus:Engine) void
+    set_content_type(IBus:Engine *engine, guint purpose, guint hints){
+	G_DEBUG_MSG(5,"[I5] set_content_type(%d, %d)", purpose, hints);
+
+	Self *self=SELF(engine);
+	if (purpose == IBUS_INPUT_PURPOSE_PASSWORD ||
+	    purpose == IBUS_INPUT_PURPOSE_PIN) {
+	    ibus_chewing_engine_set_status_flag(self, ENGINE_STATUS_IS_PASSWORD);
+	} else {
+	    ibus_chewing_engine_clear_status_flag(self, ENGINE_STATUS_IS_PASSWORD);
+	}
+    }
 }
 
 %{
